apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "storm.nimbus.fullname" . }}
  labels:
    app: {{ template "storm.nimbus.name" . }}
    chart: {{ template "storm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  namespace: {{ template "storm.namespace" . }}
spec:
  podManagementPolicy: "Parallel"
  serviceName: {{ template "storm.nimbus.fullname" . }}
  replicas: {{ .Values.nimbus.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "storm.nimbus.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "storm.nimbus.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers: 
      - name: init-zookeeper
        image: '{{ template "storm.zookeeper.image.repository" . }}:{{ template "storm.zookeeper.image.tag" . }}'
        imagePullPolicy: '{{ template "storm.zookeeper.image.pullPolicy" . }}'
        command: ['sh', '-c', '{{ template "storm.nimbus.initCommand" . }}']
      containers:
      - name: {{ .Values.nimbus.service.name }}
        image: "{{ .Values.nimbus.image.repository }}:{{ .Values.nimbus.image.tag }}"
        imagePullPolicy: {{ .Values.nimbus.image.pullPolicy }}
        command: ["storm", "nimbus", "-c", "storm.local.hostname=$(STORM_LOCAL_HOSTNAME).{{ template "storm.nimbus.fullname" . }}"]
        ports:
        - containerPort: {{ .Values.nimbus.service.port }}
        resources:
{{ toYaml .Values.nimbus.resources | indent 10 }}
        env:
        - name: STORM_DATA_DIR
          value: /data
        - name: STORM_LOG_DIR
          value: /logs
        - name: STORM_LOCAL_HOSTNAME
          valueFrom:
            fieldRef: {fieldPath: metadata.name}
        volumeMounts:
          - mountPath: {{ .Values.store.config }}
            name: storm-configmap
          - mountPath: {{ $.Values.store.log4j2conf }}
            name: storm-logging-config
          - name: data
            mountPath: {{ $.Values.store.localdatadir }}
          - name: data-log
            mountPath: {{ $.Values.store.logdir }}
          - name: storm-metrics
            mountPath: {{ $.Values.store.metricsdb }}
      securityContext:
        runAsUser: {{ .Values.security.userid }}
        fsGroup: {{ .Values.security.groupid }}
      volumes:
        - name: storm-configmap
          configMap:
            name: {{ template "storm.config.name" . }}
        - name: storm-logging-config
          configMap:
            name: {{ template "storm.logging.name" . }}
        {{- if and .Values.persistence.enabled .Values.persistence.data.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.persistence.data.existingClaim .) }}
        {{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if and .Values.persistence.enabled .Values.persistence.logs.existingClaim }}
        - name: data-log
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.persistence.logs.existingClaim .) }}
        {{- else if and ( not .Values.persistence.enabled ) .Values.logs }}
        - name: data-log
          emptyDir: {}
        {{- end }}
  {{- if and .Values.persistence.enabled (not (and .Values.persistence.data.existingClaim .Values.persistence.logs.existingClaim) )}}
  volumeClaimTemplates:
    {{- if not .Values.persistence.data.existingClaim }}
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.persistence.data.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.data.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
    {{- end }}
    {{- if and (not .Values.persistence.logs.existingClaim) }}
    - metadata:
        name: data-log
        annotations:
        {{- range $key, $value := .Values.persistence.logs.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.logs.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
    {{- end }}
    {{- if and (not .Values.persistence.metrics.existingClaim) }}
    - metadata:
        name: storm-metrics
        annotations:
        {{- range $key, $value := .Values.persistence.metrics.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.metrics.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
    {{- end }}
  {{- end }}